type: edu
files:
- name: src/Item.java
  visible: true
  text: "import java.time.LocalDateTime;\nimport java.time.format.DateTimeFormatter;\n\
    \npublic class Item {\n   String name;\n   LocalDateTime creationTime;\n   \n\
    \   public Item(String name) {\n       this.name = name;\n       creationTime\
    \ = LocalDateTime.now();\n   }\n   \n   public String toString() {\n       return\
    \ name + \" (created at: \" + creationTime.format(DateTimeFormatter.ofPattern(\"\
    dd-MM-yyyy HH:mm:ss\")) + \n               \")\";\n   }\n   \n}\n"
  learner_created: false
- name: src/Items.java
  visible: true
  placeholders:
  - offset: 152
    length: 21
    placeholder_text: // Add your code here
    initial_state:
      length: 21
      offset: 152
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: "Scanner scanner = new Scanner(System.in);\n      \
      \  \n        List<Item> items = new ArrayList<>();\n        while (true) {\n\
      \            System.out.print(\"Name: \");\n            String name = scanner.nextLine();\n\
      \            if (name.isEmpty()) {\n                break;\n            }\n\
      \            \n            items.add(new Item(name));\n        }\n\n       \
      \ System.out.println();\n        for (Item item : items) {\n            System.out.println(item);\n\
      \        }\n    }"
  text: |
    import java.util.ArrayList;
    import java.util.List;
    import java.util.Scanner;

    public class Items {
        public static void main(String[] args) {
            // Add your code here
    }
  learner_created: false
- name: test/ItemsTest.java
  visible: false
  text: |
    import org.junit.Assert;
    import org.junit.Before;
    import org.junit.Test;

    import java.io.ByteArrayInputStream;
    import java.io.ByteArrayOutputStream;
    import java.io.InputStream;
    import java.io.PrintStream;

    public class ItemsTest {
        private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();

        @Before
        public void setUpStreams() {
            System.setOut(new PrintStream(outContent));
        }

        @Test
        public void testCase1() {
            String input =
                    "Hammer" + System.lineSeparator() + "Collar" + System.lineSeparator() + "" + System.lineSeparator();

            InputStream in = new ByteArrayInputStream(input.getBytes());
            System.setIn(in);

            Items.main(new String[0]);

            String[] lines = outContent.toString().split(System.lineSeparator());
            Assert.assertEquals(3, lines.length);
            Assert.assertTrue(lines[1].startsWith("Hammer"));
            Assert.assertTrue(lines[2].startsWith("Collar"));
        }

        @Test
        public void testCase2() {
            String input = "Hammer" + System.lineSeparator() + "Collar" + System.lineSeparator() + "John" +
                    System.lineSeparator() + "" + System.lineSeparator();

            InputStream in = new ByteArrayInputStream(input.getBytes());
            System.setIn(in);

            Items.main(new String[0]);

            String[] lines = outContent.toString().split(System.lineSeparator());
            Assert.assertEquals(4, lines.length);
            Assert.assertTrue(lines[1].startsWith("Hammer"));
            Assert.assertTrue(lines[2].startsWith("Collar"));
            Assert.assertTrue(lines[3].startsWith("John"));
        }

        @Test
        public void testCase3() {
            String input = "" + System.lineSeparator();

            InputStream in = new ByteArrayInputStream(input.getBytes());
            System.setIn(in);

            Items.main(new String[0]);

            String[] lines = outContent.toString().split(System.lineSeparator());
            Assert.assertEquals(1, lines.length);
        }
    }
  learner_created: false
status: Unchecked
record: -1
