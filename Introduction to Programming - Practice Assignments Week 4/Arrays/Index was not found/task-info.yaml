type: edu
files:
- name: src/FindingIndex.java
  visible: true
  placeholders:
  - offset: 390
    length: 23
    placeholder_text: // Write your code here
    initial_state:
      length: 23
      offset: 390
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: "Scanner scanner = new Scanner(System.in);\n      \
      \  System.out.println(\"Search for?\");\n        int searchKey = scanner.nextInt();\n\
      \        \n        int index = 0;\n        boolean found = false;\n        while\
      \ (index < numbers.length) {\n            if (numbers[index] == searchKey) {\n\
      \                System.out.println(searchKey + \" is at index \" + index +\
      \ \".\");\n                found = true;\n            }\n            index++;\n\
      \        }\n        \n        if (!found) {\n            System.out.println(searchKey\
      \ + \" was not found.\");\n        }"
  text: |
    import java.util.Scanner;

    public class FindingIndex {
        public static void main(String[] args) {
            int[] numbers = new int[10];
            numbers[0] = 12;
            numbers[1] = 6;
            numbers[2] = 9;
            numbers[3] = 14;
            numbers[4] = 3;
            numbers[5] = 10;
            numbers[6] = 11;
            numbers[7] = 7;
            numbers[8] = 4;
            numbers[9] = 6;

            // Write your code here
        }
    }
  learner_created: false
- name: test/FindingIndexTest.java
  visible: false
  text: "import org.junit.Assert;\nimport org.junit.Before;\nimport org.junit.Test;\n\
    \nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\n\
    import java.io.InputStream;\nimport java.io.PrintStream;\n\npublic class FindingIndexTest\
    \ {\n    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n\
    \n    @Before\n    public void setUpStreams() {\n        System.setOut(new PrintStream(outContent));\n\
    \    }\n\n    @Test\n    public void testCase1() {\n        String input = \"\
    3\";\n\n        InputStream in = new ByteArrayInputStream(input.getBytes());\n\
    \        System.setIn(in);\n\n        FindingIndex.main(new String[0]);\n    \
    \    \n        String[] lines = outContent.toString().split(System.lineSeparator());\n\
    \        \n        Assert.assertEquals(2, lines.length);\n        \n        Assert.assertEquals(\"\
    Search for?\", lines[0].trim());\n        Assert.assertEquals(\"3 is at index\
    \ 4.\", lines[1].trim());\n    }\n\n    @Test\n    public void testCase2() {\n\
    \        String input = \"7\";\n\n        InputStream in = new ByteArrayInputStream(input.getBytes());\n\
    \        System.setIn(in);\n\n        FindingIndex.main(new String[0]);\n\n  \
    \      String[] lines = outContent.toString().split(System.lineSeparator());\n\
    \n        Assert.assertEquals(2, lines.length);\n\n        Assert.assertEquals(\"\
    Search for?\", lines[0].trim());\n        Assert.assertEquals(\"7 is at index\
    \ 7.\", lines[1].trim());\n    }\n\n    @Test\n    public void testCase3() {\n\
    \        String input = \"22\";\n\n        InputStream in = new ByteArrayInputStream(input.getBytes());\n\
    \        System.setIn(in);\n\n        FindingIndex.main(new String[0]);\n\n  \
    \      String[] lines = outContent.toString().split(System.lineSeparator());\n\
    \n        Assert.assertEquals(2, lines.length);\n\n        Assert.assertEquals(\"\
    Search for?\", lines[0].trim());\n        Assert.assertEquals(\"22 was not found.\"\
    , lines[1].trim());\n    }\n\n    @Test\n    public void testCase4() {\n     \
    \   String input = \"4\";\n\n        InputStream in = new ByteArrayInputStream(input.getBytes());\n\
    \        System.setIn(in);\n\n        FindingIndex.main(new String[0]);\n\n  \
    \      String[] lines = outContent.toString().split(System.lineSeparator());\n\
    \n        Assert.assertEquals(2, lines.length);\n\n        Assert.assertEquals(\"\
    Search for?\", lines[0].trim());\n        Assert.assertEquals(\"4 is at index\
    \ 8.\", lines[1].trim());\n    }\n}\n"
  learner_created: false
status: Unchecked
record: -1
