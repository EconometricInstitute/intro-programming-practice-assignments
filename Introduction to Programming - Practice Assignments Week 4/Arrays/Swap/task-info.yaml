type: edu
files:
- name: src/Swap.java
  visible: true
  placeholders:
  - offset: 488
    length: 21
    placeholder_text: // Add your code here
    initial_state:
      length: 21
      offset: 488
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: "Scanner scanner = new Scanner(System.in);\n      \
      \  System.out.println(\"Give two indices to swap:\");\n        int firstIndex\
      \ = scanner.nextInt();\n        int secondIndex = scanner.nextInt();\n     \
      \   \n        int value = numbers[firstIndex];\n        numbers[firstIndex]\
      \ = numbers[secondIndex];\n        numbers[secondIndex] = value;"
  text: "import java.util.Scanner;\n\npublic class Swap {\n    public static void\
    \ main(String[] args) {\n        int[] numbers = new int[5];\n        numbers[0]\
    \ = 1;\n        numbers[1] = 3;\n        numbers[2] = 5;\n        numbers[3] =\
    \ 7;\n        numbers[4] = 9;\n\n        System.out.println(numbers[0]);\n   \
    \     System.out.println(numbers[1]);\n        System.out.println(numbers[2]);\n\
    \        System.out.println(numbers[3]);\n        System.out.println(numbers[4]);\n\
    \        System.out.println();\n\n        // Add your code here\n        \n  \
    \      System.out.println();\n        System.out.println(numbers[0]);\n      \
    \  System.out.println(numbers[1]);\n        System.out.println(numbers[2]);\n\
    \        System.out.println(numbers[3]);\n        System.out.println(numbers[4]);\n\
    \    }\n}\n"
  learner_created: false
- name: test/SwapTest.java
  visible: false
  text: |
    import org.junit.Assert;
    import org.junit.Before;
    import org.junit.Test;

    import java.io.ByteArrayInputStream;
    import java.io.ByteArrayOutputStream;
    import java.io.InputStream;
    import java.io.PrintStream;

    public class SwapTest {
        private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();

        @Before
        public void setUpStreams() {
            System.setOut(new PrintStream(outContent));
        }

        @Test
        public void testCase1() {
            String input = "2" + System.lineSeparator() + "4";

            InputStream in = new ByteArrayInputStream(input.getBytes());
            System.setIn(in);

            Swap.main(new String[0]);

            String[] lines = outContent.toString().split(System.lineSeparator());

            Assert.assertEquals(13, lines.length);
            Assert.assertEquals(1, Integer.parseInt(lines[8].trim()));
            Assert.assertEquals(3, Integer.parseInt(lines[9].trim()));
            Assert.assertEquals(9, Integer.parseInt(lines[10].trim()));
            Assert.assertEquals(7, Integer.parseInt(lines[11].trim()));
            Assert.assertEquals(5, Integer.parseInt(lines[12].trim()));
        }

        @Test
        public void testCase2() {
            String input = "0" + System.lineSeparator() + "1";

            InputStream in = new ByteArrayInputStream(input.getBytes());
            System.setIn(in);

            Swap.main(new String[0]);

            String[] lines = outContent.toString().split(System.lineSeparator());

            Assert.assertEquals(13, lines.length);
            Assert.assertEquals(3, Integer.parseInt(lines[8].trim()));
            Assert.assertEquals(1, Integer.parseInt(lines[9].trim()));
            Assert.assertEquals(5, Integer.parseInt(lines[10].trim()));
            Assert.assertEquals(7, Integer.parseInt(lines[11].trim()));
            Assert.assertEquals(9, Integer.parseInt(lines[12].trim()));
        }

        @Test
        public void testCase3() {
            String input = "0" + System.lineSeparator() + "4";

            InputStream in = new ByteArrayInputStream(input.getBytes());
            System.setIn(in);

            Swap.main(new String[0]);

            String[] lines = outContent.toString().split(System.lineSeparator());

            Assert.assertEquals(13, lines.length);
            Assert.assertEquals(9, Integer.parseInt(lines[8].trim()));
            Assert.assertEquals(3, Integer.parseInt(lines[9].trim()));
            Assert.assertEquals(5, Integer.parseInt(lines[10].trim()));
            Assert.assertEquals(7, Integer.parseInt(lines[11].trim()));
            Assert.assertEquals(1, Integer.parseInt(lines[12].trim()));
        }
    }
  learner_created: false
status: Unchecked
record: -1
