type: edu
custom_name: 'Elements on the diagonal '
files:
- name: src/DiagonalElements.java
  visible: true
  placeholders:
  - offset: 433
    length: 23
    placeholder_text: // Write your code here
    initial_state:
      length: 23
      offset: 433
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |-
      List<Integer> integers = new ArrayList<>();
              for (int i = 0; i < matrix.length; i++) {
                  integers.add(matrix[i][i]);
              }
              return integers;
  text: |
    import java.util.ArrayList;
    import java.util.List;

    public class DiagonalElements {
        public static void main(String[] args) {
            int[][] matrix = {
                    {3, 2, 7, 6},
                    {2, 4, 1, 0},
                    {3, 2, 1, 0},
                    {2, 3, 4, 2}
            };

            System.out.println(getElementsOnDiagonal(matrix));
        }

        public static List<Integer> getElementsOnDiagonal(int[][] matrix) {
            // Write your code here
        }
    }
  learner_created: false
- name: test/DiagonalElementsTest.java
  visible: false
  text: |
    import org.junit.Assert;
    import org.junit.Test;

    import java.util.List;

    import static org.junit.Assert.assertEquals;

    public class DiagonalElementsTest {
        @Test
        public void testDifferentInputs() {
            int[][] matrix = {{5, 0, 0}, {0, 8, 0}, {0, 0, 10}};
            assertEquals(List.of(5, 8, 10), DiagonalElements.getElementsOnDiagonal(matrix));

            int[][] matrix2 = {{3, 2, 7, 6}, {2, 4, 1, 0}, {3, 2, 1, 0}, {2, 3, 4, 2}};
            assertEquals(List.of(3, 4, 1, 2), DiagonalElements.getElementsOnDiagonal(matrix2));

            int[][] matrix3 = {{1}};
            assertEquals(List.of(1), DiagonalElements.getElementsOnDiagonal(matrix3));
        }
    }
  learner_created: false
status: Unchecked
record: -1
