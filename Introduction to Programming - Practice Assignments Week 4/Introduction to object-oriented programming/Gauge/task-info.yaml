type: edu
files:
- name: src/Gauge.java
  visible: true
  placeholders:
  - offset: 0
    length: 24
    placeholder_text: // Write your class here
    initial_state:
      length: 24
      offset: 0
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: |
      public class Gauge {
          private int value;

          public Gauge() {

          }

          public void increase() {
              if (value < 5) {
                  value++;
              }
          }

          public void decrease() {
              if (value > 0) {
                  value--;
              }
          }

          public int value() {
              return value;
          }

          public boolean full() {
              return value == 5;
          }
      }
  text: // Write your class here
  learner_created: false
- name: src/Main.java
  visible: true
  text: |
    public class Main {
        public static void main(String[] args) {
            Gauge g = new Gauge();

            while(!g.full()) {
                System.out.println("Not full! Value: " + g.value());
                g.increase();
            }

            System.out.println("Full! Value: " + g.value());
            g.decrease();
            System.out.println("Not full! Value: " + g.value());
        }
    }
  learner_created: false
- name: test/GaugeTest.java
  visible: false
  text: |
    import org.junit.Assert;
    import org.junit.Test;

    public class GaugeTest {

        @Test
        public void testValue() {
            Gauge gauge = new Gauge();
            Assert.assertEquals(0, gauge.value());

            gauge.increase();
            Assert.assertEquals(1, gauge.value());

            gauge.increase();
            Assert.assertEquals(2, gauge.value());

            gauge.decrease();
            Assert.assertEquals(1, gauge.value());

            gauge.increase();
            Assert.assertEquals(2, gauge.value());
        }

        @Test
        public void testFull() {
            Gauge gauge = new Gauge();
            Assert.assertFalse(gauge.full());

            gauge.increase();
            gauge.increase();
            gauge.increase();
            gauge.increase();
            Assert.assertFalse(gauge.full());

            gauge.increase();
            Assert.assertTrue(gauge.full());
        }

        @Test
        public void testNegative() {
            Gauge gauge = new Gauge();

            gauge.decrease();
            Assert.assertEquals("Negative value obtained", 0, gauge.value());
        }

        @Test
        public void testLargerThanFive() {
            Gauge gauge = new Gauge();

            gauge.increase();
            gauge.increase();
            gauge.increase();
            gauge.increase();
            gauge.increase();
            gauge.increase();

            Assert.assertEquals("Value became larger than 5", 5, gauge.value());
        }
    }
  learner_created: false
status: Unchecked
record: -1
