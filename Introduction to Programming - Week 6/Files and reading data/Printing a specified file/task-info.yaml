type: edu
files:
- name: src/PrintingFile.java
  visible: true
  placeholders:
  - offset: 164
    length: 21
    placeholder_text: // Add your code here
    initial_state:
      length: 21
      offset: 164
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: "Scanner scanner = new Scanner(System.in);\n      \
      \  System.out.println(\"Which file should have its contents printed?\");\n \
      \       \n        String fileName = scanner.nextLine();\n        \n        try\
      \ (Scanner fileScanner = new Scanner(Paths.get(fileName))) {\n            while\
      \ (fileScanner.hasNextLine()) {\n                System.out.println(fileScanner.nextLine());\n\
      \            }\n        } catch (IOException e) {\n            e.printStackTrace();\n\
      \        }"
  text: |
    import java.io.IOException;
    import java.nio.file.Paths;
    import java.util.Scanner;

    public class PrintingFile {
        public static void main(String[] args) {
            // Add your code here
        }
    }
  learner_created: false
- name: test/PrintingFileTest.java
  visible: false
  text: "import org.junit.Assert;\nimport org.junit.Before;\nimport org.junit.Test;\n\
    \nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\n\
    import java.io.InputStream;\nimport java.io.PrintStream;\n\npublic class PrintingFileTest\
    \ {\n    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();\n\
    \n    @Before\n    public void setUpStreams() {\n        System.setOut(new PrintStream(outContent));\n\
    \    }\n\n    @Test\n    public void testFirstFile() {\n        String input =\
    \ \"song.txt\";\n\n        InputStream in = new ByteArrayInputStream(input.getBytes());\n\
    \        System.setIn(in);\n        \n        PrintingFile.main(new String[0]);\n\
    \        \n        String[] lines = outContent.toString().split(System.lineSeparator());\n\
    \        \n        Assert.assertTrue(lines.length >= 14);\n\n        Assert.assertEquals(\"\
    Which file should have its contents printed?\", lines[0].trim());\n        Assert.assertEquals(\"\
    No option for duality\", lines[1].trim());\n        Assert.assertEquals(\"Tieto\
    \ is here allright!\", lines[13].trim());\n    }\n\n    @Test\n    public void\
    \ testSecondFile() {\n        String input = \"data.txt\";\n\n        InputStream\
    \ in = new ByteArrayInputStream(input.getBytes());\n        System.setIn(in);\n\
    \n        PrintingFile.main(new String[0]);\n\n        String[] lines = outContent.toString().split(System.lineSeparator());\n\
    \n        Assert.assertTrue(lines.length >= 11);\n\n        Assert.assertEquals(\"\
    Which file should have its contents printed?\", lines[0].trim());\n        Assert.assertEquals(\"\
    1992: 12.4\", lines[1].trim());\n        Assert.assertEquals(\"2001: 16.5\", lines[10].trim());\n\
    \    }\n}\n"
  learner_created: false
- name: song.txt
  visible: true
  text: |
    No option for duality
    The old is where we come
    Clockspeed is fast, but we'll survive
    The new will overcome
    We are challengers, not followers
    We take the ball to build
    Easy safe services
    Are here to stay

    Value for society
    Value for life
    For you and me
    Tieto is here allright!
  learner_created: false
- name: data.txt
  visible: true
  text: |
    1992: 12.4
    1993: 15.8
    1994: 13.2
    1995: 16.1
    1996: 17.2
    1997: 18.1
    1998: 20.1
    1999: 21.2
    2000: 19.2
    2001: 16.5
  learner_created: false
status: Unchecked
record: -1
