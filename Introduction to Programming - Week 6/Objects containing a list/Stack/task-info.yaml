type: edu
files:
- name: src/MainProgram.java
  visible: true
  text: |
    public class MainProgram {
        public static void main(String[] args) {
            Stack s = new Stack();
            System.out.println(s.isEmpty());
            System.out.println(s.values());
            s.add("Value");
            System.out.println(s.isEmpty());
            System.out.println(s.values());
            String taken = s.take();
            System.out.println(s.isEmpty());
            System.out.println(s.values());
            System.out.println(taken);
        }
    }
  learner_created: false
- name: src/Stack.java
  visible: true
  placeholders:
  - offset: 77
    length: 32
    placeholder_text: // Add class implementation here
    initial_state:
      length: 32
      offset: 77
    initialized_from_dependency: false
    selected: false
    status: Unchecked
    encrypted_possible_answer: "private List<String> values;\n\n    public Stack()\
      \ {\n        values = new ArrayList<>();\n    }\n    \n    public boolean isEmpty()\
      \ {\n        return values.isEmpty();\n    }\n\n    public void add(String value)\
      \ {\n        values.add(value);\n    }\n\n    public List<String> values() {\n\
      \        return values;\n    }\n\n    public String take() {\n        String\
      \ value =  values.get(values.size() - 1);\n        values.remove(values.size()\
      \ - 1);\n        return value;\n    }"
  text: |
    import java.util.ArrayList;
    import java.util.List;

    public class Stack {
        // Add class implementation here
    }
  learner_created: false
- name: test/StackTest.java
  visible: false
  text: "import org.junit.Assert;\nimport org.junit.Test;\n\nimport java.util.List;\n\
    \npublic class StackTest {\n    @Test\n    public void testConstructor() {\n \
    \       Stack stack = new Stack();\n    }\n    \n    @Test\n    public void testEmpty()\
    \ {\n        Stack stack = new Stack();\n        Assert.assertTrue(stack.isEmpty());\n\
    \    }\n    \n    @Test\n    public void testAdd() {\n        Stack stack = new\
    \ Stack();\n        stack.add(\"Hello\");\n        \n        Assert.assertFalse(stack.isEmpty());\n\
    \        Assert.assertEquals(List.of(\"Hello\"), stack.values());\n        \n\
    \        stack.add(\"Hello again\");\n        Assert.assertFalse(stack.isEmpty());\n\
    \        Assert.assertEquals(List.of(\"Hello\", \"Hello again\"), stack.values());\n\
    \    }\n    \n    @Test\n    public void testTake() {\n        Stack stack = new\
    \ Stack();\n        stack.add(\"Hello\");\n        \n        Assert.assertEquals(\"\
    Hello\", stack.take());\n        Assert.assertTrue(stack.isEmpty());\n       \
    \ \n        stack.add(\"Bye\");\n        stack.add(\"Bye again\");\n        stack.add(\"\
    Bye again again\");\n        \n        Assert.assertEquals(\"Bye again again\"\
    ,stack.take());\n        Assert.assertFalse(stack.isEmpty());\n        \n    \
    \    stack.take();\n        \n        Assert.assertEquals(\"Bye\", stack.take());\n\
    \        Assert.assertTrue(stack.isEmpty());\n    }\n}\n"
  learner_created: false
status: Unchecked
record: -1
